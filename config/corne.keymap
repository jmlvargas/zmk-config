/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include "keys_es_latin_american.h"

&sk {
    /delete-property/ ignore-modifiers;

    release-after-ms = <1500>;
};

&caps_word {
    continue-list = <UNDERSCORE BACKSPACE DELETE SLASH>;
    mods = <(MOD_LSFT)>;
};

&lt {
    flavor = "hold-preferred";
    tapping-term-ms = <160>;
};

/ {
    combos {
        compatible = "zmk,combos";

        bootldr_l {
            bindings = <&bootloader>;
            key-positions = <24 29>;
            layers = <3 1>;
        };

        bootldr_r {
            bindings = <&bootloader>;
            key-positions = <30 35>;
            layers = <3 1>;
        };

        reset_l {
            bindings = <&sys_reset>;
            key-positions = <0 5>;
            layers = <3 1>;
        };

        reset_r {
            bindings = <&sys_reset>;
            key-positions = <6 11>;
            layers = <3 1>;
        };

        clear_bt_profile {
            bindings = <&bt BT_CLR>;
            key-positions = <29 26>;
            layers = <3 1>;
        };

        next_bt_profile {
            bindings = <&bt BT_NXT>;
            key-positions = <29 0>;
            layers = <1 3>;
        };
    };

    macros {
        shift: shift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LEFT_SHIFT>;

            label = "SHIFT";
        };

        as: as {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;

            label = "AS";
        };

        dmkp: delayed_modkp {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&macro_param_2to1 &kp MACRO_PLACEHOLDER>,
                <&macro_wait_time 80>,
                <&macro_release>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>;

            label = "DELAYED_MODKP";
        };

        la_caret: mcaret {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(SINGLE_QUOTE) &kp SPACE>;
            label = "MCARET";
        };

        la_grave: tildegrave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(BACKSLASH) &kp SPACE>;
            label = "TILDEGRAVE";
        };

        la_otilde: la_oblique_tilde {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(RIGHT_BRACKET)>;
            label = "LA_OBLIQUE_TILDE";
        };

        la_par_o: mparenopen {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(N8)>;
            label = "MPARENOPEN";
        };

        la_par_c: mparencl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(N9)>;
            label = "MPARENCL";
        };

        la_brace_o: mbraceo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp APOS>;
            label = "MBRACEO";
        };

        la_brace_c: mbracec {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp BACKSLASH>;
            label = "MBRACEC";
        };

        la_brack_o: bracketo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(APOS)>;
            label = "BRACKETO";
        };

        la_brack_c: bracketc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(BACKSLASH)>;
            label = "BRACKETC";
        };

        la_less: mlessthan {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp NON_US_BACKSLASH>;
            label = "MLESSTHAN";
        };

        la_greater: mgreat {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(NON_US_BACKSLASH)>;
            label = "MGREAT";
        };

        la_at: arroba {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(Q)>;
            label = "ARROBA";
        };

        la_amp: amp {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(NUMBER_6)>;
            label = "AMP";
        };

        la_aster: astersk {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(RIGHT_BRACKET)>;
            label = "ASTERSK";
        };

        la_equal: la_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(NUMBER_0)>;
            label = "LA_EQUAL";
        };

        la_plus: la_plus {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_BRACKET>;
            label = "LA_PLUS";
        };

        la_minus: la_minus {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SLASH>;
            label = "LA_MINUS";
        };

        la_pipe: la_pipe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE>;
            label = "LA_PIPE";
        };

        la_tilde: la_tilde {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET>;
            label = "LA_TILDE";
        };

        la_apost: la_apost {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS>;
            label = "LA_APOST";
        };

        la_ntild: la_ntild {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SEMICOLON>;
            label = "LA_NTILD";
        };

        la_colon: la_colon {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(DOT)>;
            label = "LA_COLON";
        };

        la_scol: la_scolon {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(COMMA)>;
            label = "LA_SCOLON";
        };

        la_quo: la_double_quote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(NUMBER_2)>;
            label = "LA_DOUBLE_QUOTE";
        };

        la_exp: la_exponente {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(SINGLE_QUOTE)>;
            label = "LA_EXPONENTE";
        };

        la_exc_o: la_exclamation_open {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(EQUAL)>;
            label = "LA_EXCLAMATION_OPEN";
        };

        la_undersc: la_undersc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(SLASH)>;
            label = "LA_UNDERSC";
        };

        la_backslash: la_backslash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(MINUS)>;
            label = "LA_BACKSLASH";
        };

        la_quest_c: la_quest_c {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(MINUS)>;
            label = "LA_QUEST_C";
        };

        la_quest_o: la_quest_o {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL>;
            label = "LA_QUEST_O";
        };

        la_slash: la_sash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(N7)>;
            label = "LA_SASH";
        };
    };

    behaviors {
        as_ht: autoshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            bindings = <&shift>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
            flavor = "tap-preferred";
        };

        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <165>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 37 0>;
            flavor = "tap-preferred";
            quick-tap-ms = <250>;
            require-prior-idle-ms = <125>;
        };

        ht_tilde: ht_tilde {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_TILDE";
            bindings = <&kp>, <&la_tilde>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <1 2 3 4 5 13 14 15 16 17 25 26 27 28 29 6 7 8 9 10 18 19 20 21 22 30 31 32 33 34 11 0>;
            flavor = "balanced";
        };

        td_shift_caps: td_shift_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SHIFT_CAPS";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT>, <&kp CAPSLOCK>;
        };

        mp_quo: mp_quo {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_QUO";
            bindings = <&la_quo>, <&la_apost>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mp_exc: mp_exc {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_EXC";
            bindings = <&kp EXCL>, <&la_exc_o>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mp_quest: mp_quest {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_QUEST";
            bindings = <&la_quest_c>, <&la_quest_o>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mp_par_brk_o: mp_par_brk_o {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_PAR_BRK_O";
            bindings = <&la_par_o>, <&la_brack_o>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mp_par_brk_c: mp_par_brk_c {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_PAR_BRK_C";
            bindings = <&la_par_c>, <&la_brack_c>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mp_brc_lt_o: mp_brc_lt_o {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_BRC_LT_O";
            bindings = <&la_brace_o>, <&la_less>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mp_brc_gt_c: mp_brc_gt_c {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_BRC_GT_C";
            bindings = <&la_brace_c>, <&la_greater>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mp_otd_grv: mp_otd_grv {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_OTD_GRV";
            bindings = <&la_otilde>, <&la_grave>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mp_slh_bsl: mp_slh_bsl {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_SLH_BSL";
            bindings = <&la_slash>, <&la_backslash>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mp_dot_cma: mp_dot_cma {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_DOT_CMA";
            bindings = <&kp PERIOD>, <&kp COMMA>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mp_2_cma: mp_2_cma {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_2_CMA";
            bindings = <&kp NUMBER_2>, <&kp COMMA>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mp_3_dot: mp_3_dot {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_3_DOT";
            bindings = <&kp NUMBER_3>, <&kp DOT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ht_mp_quo: ht_mp_quo {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_MP_QUO";
            bindings = <&kp>, <&mp_quo>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <32 33>;
            flavor = "balanced";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        bas {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB         &kp Q  &kp W  &kp E             &kp R  &kp T        &kp Y      &kp U  &kp I              &kp O       &kp P         &kp BACKSPACE
&td_shift_caps  &kp A  &kp S  &kp D             &kp F  &kp G        &kp H      &kp J  &kp K              &kp L       &la_ntild     &ht_tilde RSHIFT 0
&kp LEFT_GUI    &kp Z  &kp X  &kp C             &kp V  &kp B        &kp N      &kp M  &kp COMMA          &kp PERIOD  &kp LEFT_ALT  &lt 3 ESCAPE
                              &kp LEFT_CONTROL  &mo 1  &kp SPACE    &kp ENTER  &mo 2  &kp RIGHT_CONTROL
            >;
        };

        fst {
            bindings = <
&kp BACKSPACE   &kp LC(Q)  &kp LC(W)  &kp ESCAPE        &kp LC(R)  &kp LC(T)    &la_equal  &kp N7        &kp N8             &kp N9        &la_aster    &kp BACKSPACE
&kp LEFT_SHIFT  &kp LC(A)  &kp LC(S)  &kp DELETE        &mo 2      &kp LC(G)    &la_plus   &kp NUMBER_4  &kp N5             &kp NUMBER_6  &la_minus    &ht_mp_quo RSHIFT 0
&none           &kp LC(Z)  &kp LC(X)  &kp LC(C)         &kp LC(V)  &kp LC(B)    &kp N0     &kp NUMBER_1  &mp_2_cma          &mp_3_dot     &mp_slh_bsl  &mo 3
                                      &kp LEFT_CONTROL  &trans     &kp ENTER    &kp ENTER  &mo 2         &kp RIGHT_CONTROL
            >;
        };

        snd {
            bindings = <
&mp_otd_grv     &mp_exc       &la_at     &kp POUND         &kp DOLLAR  &kp PERCENT      &kp PAGE_UP     &kp PAGE_DOWN   &mp_par_brk_o      &mp_par_brk_c  &none         &kp DELETE
&kp LEFT_SHIFT  &la_amp       &la_pipe   &mp_quest         &none       &none            &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW       &kp RIGHT      &kp TAB       &kp RIGHT_SHIFT
&kp LEFT_GUI    &kp LEFT_ALT  &la_caret  &none             &none       &none            &kp HOME        &kp END         &mp_brc_lt_o       &mp_brc_gt_c   &kp LEFT_ALT  &kp ESCAPE
                                         &kp LEFT_CONTROL  &none       &kp BACKSPACE    &kp SPACE       &trans          &kp RIGHT_CONTROL
            >;
        };

        sys {
            bindings = <
&bt BT_NXT      &bt BT_SEL 0  &bt BT_SEL 1     &bt BT_CLR        &kp C_VOLUME_UP  &kp INSERT    &none   &kp F7  &kp F8             &kp F9  &kp F10  &none
&kp LEFT_SHIFT  &none         &kp PRINTSCREEN  &none             &kp C_VOL_DN     &none         &none   &kp F4  &kp F5             &kp F6  &kp F11  &none
&kp LEFT_GUI    &kp LEFT_ALT  &kp PAUSE_BREAK  &none             &kp C_MUTE       &none         &tog 1  &kp F1  &kp F2             &kp F3  &kp F12  &trans
                                               &kp LEFT_CONTROL  &none            &none         &none   &none   &kp RIGHT_CONTROL
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
