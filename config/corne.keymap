/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>

&sk {
    /delete-property/ ignore-modifiers;

    release-after-ms = <1500>;
};

&caps_word {
    continue-list = <UNDERSCORE BACKSPACE DELETE SLASH>;
    mods = <(MOD_LSFT)>;
};

/ {
    combos {
        compatible = "zmk,combos";

        pageup {
            bindings = <&kp PAGE_UP>;
            key-positions = <8 9>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            layers = <3>;
        };

        pagedown {
            bindings = <&kp PAGE_DOWN>;
            key-positions = <20 21>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            layers = <3>;
        };

        bootldr_l {
            bindings = <&bootloader>;
            key-positions = <24 29>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            layers = <3>;
        };

        bootldr_r {
            bindings = <&bootloader>;
            key-positions = <30 35>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            layers = <3>;
        };

        reset_l {
            bindings = <&sys_reset>;
            key-positions = <0 5>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            layers = <3>;
        };

        reset_r {
            bindings = <&sys_reset>;
            key-positions = <6 11>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            layers = <3>;
        };
    };

    macros {
        shift: shift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LEFT_SHIFT>;

            label = "SHIFT";
        };

        as: as {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;

            label = "AS";
        };

        dmkp: delayed_modkp {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&macro_param_2to1 &kp MACRO_PLACEHOLDER>,
                <&macro_wait_time 80>,
                <&macro_release>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>;

            label = "DELAYED_MODKP";
        };

        la_caret: mcaret {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(SINGLE_QUOTE) &kp SPACE>;
            label = "MCARET";
        };

        la_grave: tildegrave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(BACKSLASH) &kp SPACE>;
            label = "TILDEGRAVE";
        };

        la_otilde: la_oblique_tilde {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(RIGHT_BRACKET)>;
            label = "LA_OBLIQUE_TILDE";
        };

        la_par_o: mparenopen {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(N8)>;
            label = "MPARENOPEN";
        };

        la_par_c: mparencl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(N9)>;
            label = "MPARENCL";
        };

        la_brace_o: mbraceo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp APOS>;
            label = "MBRACEO";
        };

        la_brace_c: mbracec {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp BACKSLASH>;
            label = "MBRACEC";
        };

        la_brack_o: bracketo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(APOS)>;
            label = "BRACKETO";
        };

        la_brack_c: bracketc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(BACKSLASH)>;
            label = "BRACKETC";
        };

        la_less: mlessthan {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp NON_US_BACKSLASH>;
            label = "MLESSTHAN";
        };

        la_great: mgreat {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(NON_US_BACKSLASH)>;
            label = "MGREAT";
        };

        la_at: arroba {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(Q)>;
            label = "ARROBA";
        };

        la_amp: amp {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(NUMBER_6)>;
            label = "AMP";
        };

        la_astsk: astersk {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(RIGHT_BRACKET)>;
            label = "ASTERSK";
        };

        la_equal: la_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(NUMBER_0)>;
            label = "LA_EQUAL";
        };

        la_plus: la_plus {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_BRACKET>;
            label = "LA_PLUS";
        };

        la_minus: la_minus {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SLASH>;
            label = "LA_MINUS";
        };

        la_pipe: la_pipe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE>;
            label = "LA_PIPE";
        };

        la_tilde: la_tilde {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET>;
            label = "LA_TILDE";
        };

        la_apost: la_apost {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS>;
            label = "LA_APOST";
        };

        la_ntild: la_ntild {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SEMICOLON>;
            label = "LA_NTILD";
        };

        la_colon: la_colon {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(DOT)>;
            label = "LA_COLON";
        };

        la_scol: la_scolon {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(COMMA)>;
            label = "LA_SCOLON";
        };

        la_quo: la_double_quote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(NUMBER_2)>;
            label = "LA_DOUBLE_QUOTE";
        };

        la_exp: la_exponente {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(SINGLE_QUOTE)>;
            label = "LA_EXPONENTE";
        };

        la_exc_o: la_exclamation_open {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(EQUAL)>;
            label = "LA_EXCLAMATION_OPEN";
        };

        la_undersc: la_undersc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(SLASH)>;
            label = "LA_UNDERSC";
        };

        la_backslash: la_backslash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(MINUS)>;
            label = "LA_BACKSLASH";
        };

        la_quest_c: la_quest_o {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(MINUS)>;
            label = "LA_QUEST_O";
        };

        la_quest_o: la_quest_c {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL>;
            label = "LA_QUEST_C";
        };
    };

    behaviors {
        as_ht: autoshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            bindings = <&shift>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
            flavor = "tap-preferred";
        };

        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <165>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 0>;
            flavor = "tap-preferred";
            quick-tap-ms = <250>;
            require-prior-idle-ms = <125>;
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <165>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 11>;
            flavor = "tap-preferred";
            quick-tap-ms = <250>;
            require-prior-idle-ms = <125>;
        };

        ssw: symbol_switch {
            compatible = "zmk,behavior-hold-tap";
            label = "SYMBOL_SWITCH";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <165>;
            flavor = "balanced";
            quick-tap-ms = <250>;
        };

        hml_quest_c: hml_quest_c {
            compatible = "zmk,behavior-hold-tap";
            label = "HML_QUEST_C";
            bindings = <&kp>, <&la_quest_c>;

            #binding-cells = <2>;
            tapping-term-ms = <165>;
            hold-trigger-key-positions = <6 7 8 6 7 8 9 10 30 31 32 33 34 18 19 20 21 22 11 23 35>;
            flavor = "tap-preferred";
            quick-tap-ms = <250>;
            require-prior-idle-ms = <125>;
        };

        ssw_tildes: ssw_tilde_apostrophe {
            compatible = "zmk,behavior-hold-tap";
            label = "SSW_TILDE_APOSTROPHE";
            bindings = <&la_apost>, <&la_tilde>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <250>;
        };

        hml_apos: hml_apos {
            compatible = "zmk,behavior-hold-tap";
            label = "HML_APOS";
            bindings = <&kp>, <&la_apost>;

            #binding-cells = <2>;
            tapping-term-ms = <165>;
            hold-trigger-key-positions = <6 7 8 6 7 8 9 10 30 31 32 33 34 18 19 20 21 22 11 23 35>;
            flavor = "tap-preferred";
            quick-tap-ms = <250>;
            require-prior-idle-ms = <125>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESCAPE  &kp Q  &kp W          &kp E                &kp R            &kp T        &kp Y      &kp U            &kp I                 &kp O          &kp P          &kp BACKSPACE
&kp TAB     &kp A  &hml LSHIFT S  &hml LEFT_CONTROL D  &hml LEFT_ALT F  &kp G        &kp H      &hmr LEFT_ALT J  &hmr RIGHT_CONTROL K  &hmr RSHIFT L  &la_ntild      &la_tilde
&caps_word  &kp Z  &kp X          &kp C                &kp V            &kp B        &kp N      &kp M            &kp COMMA             &kp PERIOD     &kp KP_DIVIDE  &kp DEL
                                  &kp LEFT_GUI         &mo 1            &kp SPACE    &kp ENTER  &mo 2            &mo 3
            >;
        };

        sym {
            bindings = <
&la_otilde  &la_at     &la_quo             &kp POUND         &kp DOLLAR   &kp PERCENT      &la_amp      &la_undersc  &la_caret    &la_pipe     &kp KP_MULTIPLY  &la_equal
&la_grave   &kp EXCL   &hml_apos LSHIFT 0  &kp LEFT_CONTROL  &la_quest_c  &none            &la_par_o    &la_par_c    &la_brace_o  &la_brace_c  &kp KP_MINUS     &kp KP_PLUS
&none       &la_exc_o  &none               &none             &la_quest_o  &none            &la_brack_o  &la_brack_c  &la_less     &la_great    &la_backslash    &none
                                           &kp ENTER         &trans       &kp BACKSPACE    &none        &none        &none
            >;
        };

        num {
            bindings = <
&la_otilde  &la_at     &la_quo                 &kp POUND         &kp DOLLAR               &kp PERCENT    &kp C_AL_CALC  &kp NUMBER_7  &kp N8        &kp N9        &kp KP_MULTIPLY  &la_equal
&la_grave   &kp EXCL   &hml_apos LEFT_SHIFT 0  &kp LEFT_CONTROL  &hml_quest_c LEFT_ALT 0  &none          &none          &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp KP_MINUS     &kp KP_PLUS
&none       &la_exc_o  &kp INSERT              &none             &la_quest_o              &none          &kp N0         &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp KP_DIVIDE    &none
                                               &kp LEFT_GUI      &trans                   &none          &none          &trans        &none
            >;
        };

        fun {
            bindings = <
&kp PAUSE_BREAK    &kp F1           &none       &none             &none         &none            &kp F2     &kp F3          &kp F4        &kp F5     &kp F8   &kp F9
&ext_power EP_TOG  &kp PRINTSCREEN  &kp LSHIFT  &kp LEFT_CONTROL  &kp LEFT_ALT  &none            &kp LEFT   &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &kp F10  &kp F11
&bt BT_CLR         &bt BT_NXT       &kp LC(X)   &kp LC(C)         &kp LC(V)     &kp C_MUTE       &kp F6     &kp F7          &kp HOME      &kp END    &kp F12  &sk LEFT_ALT
                                                &kp LEFT_GUI      &none         &kp BACKSPACE    &kp SPACE  &trans          &trans
            >;
        };
    };
};
