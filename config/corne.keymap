/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
// #define ZMK_POINTING_DEFAULT_MOVE_VAL 1000
// #define ZMK_POINTING_DEFAULT_SCRL_VAL 20

#include "keys_es_latin_american.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&caps_word {
    continue-list = <UNDERSCORE BACKSPACE DELETE SLASH>;
    mods = <(MOD_LSFT)>;
};

&lt {
    flavor = "hold-preferred";
    tapping-term-ms = <160>;
    quick-tap-ms = <150>;
};

&mmv { time-to-max-speed-ms = <500>; };

/ {
    combos { compatible = "zmk,combos"; };

    macros {
        shift: shift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LEFT_SHIFT>;

            label = "SHIFT";
        };

        as: as {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;

            label = "AS";
        };

        GRAVE_: GRAVE_ {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ES_GRAVE &kp SPACE>;
            label = "GRAVE_";
        };

        CARET_: CARET_ {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ES_CARET &kp SPACE>;
            label = "CARET_";
        };
    };

    behaviors {
        as_ht: autoshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            bindings = <&shift>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
            flavor = "tap-preferred";
        };

        EXCMRKS: EXCMRKS {
            compatible = "zmk,behavior-mod-morph";
            label = "EXCMRKS";
            bindings = <&kp ES_EXCL>, <&kp ES_IEXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        QUEMRKS: QUEMRKS {
            compatible = "zmk,behavior-mod-morph";
            label = "QUEMRKS";
            bindings = <&kp ES_QMARK>, <&kp ES_IQMARK>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        DIV_SLH: DIV_SLH {
            compatible = "zmk,behavior-mod-morph";
            label = "DIV_SLH";
            bindings = <&kp ES_SLASH>, <&kp ES_BSLH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        HHT: HHT {
            compatible = "zmk,behavior-hold-tap";
            label = "HHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <125>;
            flavor = "hold-preferred";
            hold-while-undecided;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41>;
        };

        TLD_CRT: TLD_CRT {
            compatible = "zmk,behavior-mod-morph";
            label = "TLD_CRT";
            bindings = <&kp ES_TILDE>, <&kp ES_CARET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        QUOTES: QUOTES {
            compatible = "zmk,behavior-mod-morph";
            label = "QUOTES";
            bindings = <&kp ES_DOUBLE_QUOTES>, <&kp ES_SINGLE_QUOTE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        TWO_AT: TWO_AT {
            compatible = "zmk,behavior-mod-morph";
            label = "TWO_AT";
            bindings = <&kp ES_N2>, <&kp ES_AT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        SEMCOL: SEMCOL {
            compatible = "zmk,behavior-mod-morph";
            label = "SEMCOL";
            bindings = <&kp ES_SEMI>, <&kp ES_COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ALT_Win: ALT_Win {
            compatible = "zmk,behavior-tap-dance";
            label = "ALT_WIN";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT>, <&kp LWIN>;

            tapping-term-ms = <250>;
        };

        NUM_Alt: NUM_Alt {
            compatible = "zmk,behavior-tap-dance";
            label = "NUM_ALT";
            #binding-cells = <0>;
            bindings = <&mo 5>, <&kp LALT>;

            tapping-term-ms = <250>;
        };

        SYM_SYX: SYM_SYX {
            compatible = "zmk,behavior-tap-dance";
            label = "SYM_SYX";
            #binding-cells = <0>;
            bindings = <&mo 2>, <&mo 3>;

            tapping-term-ms = <250>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qrt {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB                   &kp Q  &kp W  &kp E  &kp R  &kp T        &kp Y      &kp U     &kp I      &kp O       &kp P           &kp BACKSPACE
&kp LSHIFT                &kp A  &kp S  &kp D  &kp F  &kp G        &kp H      &kp J     &kp K      &kp L       &kp ES_N_TILDE  &kp RSHIFT
&HHT LEFT_CONTROL ESCAPE  &kp Z  &kp X  &kp C  &kp V  &kp B        &kp N      &kp M     &kp COMMA  &kp PERIOD  &kp ES_ACUTE    &HHT RIGHT_CONTROL ESCAPE
                                        &mo 5  &mo 4  &kp SPACE    &kp ENTER  &SYM_SYX  &ALT_Win
            >;
        };

        cmk {
            bindings = <
&trans  &kp Q  &kp W  &kp F   &kp P   &kp G     &kp J   &kp L   &kp U         &kp Y       &kp ES_N_TILDE  &trans
&trans  &kp A  &kp R  &kp S   &kp T   &kp D     &kp H   &kp N   &kp E         &kp I       &kp O           &trans
&trans  &kp Z  &kp X  &kp C   &kp V   &kp B     &kp K   &kp M   &kp ES_COMMA  &kp ES_DOT  &kp ES_ACUTE    &trans
                      &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        sym {
            bindings = <
&GRAVE_  &kp ES_EXCL          &kp ES_AT     &kp ES_POUND  &kp ES_DOLLAR    &kp ES_PERCENT          &kp ES_STAR  &none        &kp ES_LBKT       &kp ES_RBKT          &kp N0        &trans
&trans   &kp ES_SINGLE_QUOTE  &kp ES_PIPE   &kp ES_AMPS   &kp ES_EQUAL     &kp ES_DOUBLE_QUOTES    &kp ES_PLUS  &kp ES_LBRC  &kp ES_LPAR       &kp ES_RPAR          &kp ES_MINUS  &trans
&trans   &kp ES_BSLH          &kp ES_TILDE  &CARET_       &kp ES_QUESTION  &kp ES_UNDER            &kp ES_DOT   &kp ES_RBRC  &kp ES_LESS_THAN  &kp ES_GREATER_THAN  &kp ES_SLASH  &trans
                                            &trans        &trans           &trans                  &trans       &trans       &trans
            >;
        };

        syx {
            bindings = <
&kp ES_GRAVE  &kp ES_IEXCL         &kp ES_AT     &kp ES_POUND  &kp ES_DOLLAR  &kp ES_PERCENT          &kp ES_STAR  &none        &kp ES_LBKT       &kp ES_RBKT          &kp N0        &trans
&trans        &kp ES_SINGLE_QUOTE  &kp ES_PIPE   &kp ES_AMPS   &kp ES_EQUAL   &kp ES_DOUBLE_QUOTES    &kp ES_PLUS  &kp ES_LBRC  &kp ES_LPAR       &kp ES_RPAR          &kp ES_MINUS  &trans
&trans        &kp ES_BSLH          &kp ES_TILDE  &kp ES_CARET  &kp ES_IQMARK  &kp ES_UNDER            &kp ES_DOT   &kp ES_RBRC  &kp ES_LESS_THAN  &kp ES_GREATER_THAN  &kp ES_SLASH  &trans
                                                 &trans        &trans         &trans                  &trans       &trans       &trans
            >;
        };

        nav {
            bindings = <
&trans  &kp F1  &kp F2           &kp F3   &kp F4   &kp F5     &kp PG_UP       &kp CAPSLOCK    &kp INSERT  &none            &kp PRINTSCREEN  &kp PAUSE_BREAK
&trans  &kp F6  &kp PRINTSCREEN  &kp DEL  &none    &kp F7     &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP      &kp RIGHT_ARROW  &kp ES_MINUS     &trans
&trans  &kp F8  &kp F9           &kp F10  &kp F11  &kp F12    &kp PAGE_DOWN   &kp C_MUTE      &kp HOME    &kp END          &kp ES_SLASH     &trans
                                 &trans   &trans   &trans     &trans          &trans          &trans
            >;
        };

        num {
            bindings = <
&trans  &none           &kp UP    &none            &none   &none     &kp ES_STAR  &kp N7  &kp N8  &kp N9  &kp N0        &kp BACKSPACE
&trans  &kp LEFT_ARROW  &kp DOWN  &kp RIGHT_ARROW  &none   &none     &kp ES_PLUS  &kp N4  &kp N5  &kp N6  &kp ES_MINUS  &trans
&trans  &none           &none     &none            &none   &mo 6     &kp ES_DOT   &kp N1  &kp N2  &kp N3  &kp ES_SLASH  &trans
                                  &trans           &trans  &trans    &trans       &trans  &trans
            >;
        };

        bth {
            bindings = <
&none        &none         &none       &none       &none  &none    &none  &none  &none  &out OUT_TOG  &none  &none
&none        &bt BT_SEL 0  &bt BT_NXT  &bt BT_CLR  &none  &none    &none  &none  &none  &none         &none  &none
&bootloader  &tog 1        &none       &none       &none  &none    &none  &none  &none  &none         &none  &bootloader
                                       &none       &none  &none    &none  &none  &none
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
