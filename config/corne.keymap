/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "keys_es_latin_american.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&caps_word {
    continue-list = <UNDERSCORE BACKSPACE DELETE SLASH>;
    mods = <(MOD_LSFT)>;
};

&lt {
    flavor = "hold-preferred";
    tapping-term-ms = <160>;
    quick-tap-ms = <150>;
};

/ {
    combos {
        compatible = "zmk,combos";

        bootldr_l {
            bindings = <&bootloader>;
            key-positions = <24 29>;
            layers = <3>;
        };

        bootldr_r {
            bindings = <&bootloader>;
            key-positions = <30 35>;
        };

        reset_l {
            bindings = <&sys_reset>;
            key-positions = <0 5>;
            layers = <3>;
        };

        reset_r {
            bindings = <&sys_reset>;
            key-positions = <6 11>;
        };

        clear_bt_profile {
            bindings = <&bt BT_CLR>;
            key-positions = <10 11>;
        };
    };

    macros {
        shift: shift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LEFT_SHIFT>;

            label = "SHIFT";
        };

        as: as {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;

            label = "AS";
        };

        dmkp: delayed_modkp {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&macro_param_2to1 &kp MACRO_PLACEHOLDER>,
                <&macro_wait_time 80>,
                <&macro_release>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>;

            label = "DELAYED_MODKP";
        };

        la_grave: tildegrave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(BACKSLASH) &kp SPACE>;
            label = "TILDEGRAVE";
        };

        win_close: win_close {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(F4)>;
            label = "WIN_CLOSE";
        };

        win_max: win_max {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(UP)>;
            label = "WIN_MAX";
        };

        win_min: win_min {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(DOWN)>;
            label = "WIN_MIN";
        };

        win_tile_l: win_tile_l {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LEFT)>;
            label = "WIN_TILE_L";
        };

        win_tile_r: win_tile_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(RIGHT)>;
            label = "WIN_TILE_RIGHT";
        };

        win_tile_t: win_tile_t {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(UP))>;
            label = "WIN_TILE_T";
        };

        win_tile_b: win_tile_b {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(DOWN))>;
            label = "WIN_TILE_B";
        };

        win_tile_tl: win_tile_tl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LS(LEFT))>;
            label = "WIN_TILE_TL";
        };

        win_tile_bl: win_tile_bl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(LEFT))>;
            label = "WIN_TILE_BL";
        };

        win_tile_tr: win_tile_tr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LS(RIGHT))>;
            label = "WIN_TILE_TR";
        };

        win_tile_br: win_tile_br {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(RIGHT))>;
            label = "WIN_TILE_BR";
        };

        dsk_prev: dsk_prev {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(LA(LEFT)))>;
            label = "DSK_PREV";
        };

        dsk_next: dsk_next {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(LA(RIGHT)))>;
            label = "DSK_NEXT";
        };

        win_roll: win_roll {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(LS(UP)))>;
            label = "WIN_ROLL";
        };
    };

    behaviors {
        as_ht: autoshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            bindings = <&shift>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
            flavor = "tap-preferred";
        };

        mp_quo: mp_quo {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_QUO";
            bindings = <&kp ES_SINGLE_QUOTE>, <&kp ES_DOUBLE_QUOTES>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ht: ht {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <1 2 3 4 5 13 14 15 16 17 25 26 27 28 29 6 7 8 9 10 18 19 20 21 22 30 31 32 33 34 11 0 23 35 41 36 24 12 38 39>;
            flavor = "balanced";
        };

        ht_hp: ht_hp {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_HP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <160>;
            hold-trigger-key-positions = <1 2 3 4 5 13 14 15 16 17 25 26 27 28 29 6 7 8 9 10 18 19 20 21 22 30 31 32 33 34 11 0 23 35 41 36 24 12 38 39>;
            flavor = "hold-preferred";
        };

        td_shf_cap: td_shf_cap {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SHF_CAP";
            #binding-cells = <0>;
            bindings = <&kp RSHIFT>, <&kp CLCK>;

            tapping-term-ms = <300>;
        };

        mp_lpar: mp_lpar {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_LPAR";
            bindings = <&kp ES_LPAR>, <&kp ES_LBKT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mp_rpar: mp_rpar {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_RPAR";
            bindings = <&kp ES_RPAR>, <&kp ES_RBKT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mp_exc: mp_exc {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_EXC";
            bindings = <&kp ES_EXCL>, <&kp ES_IEXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mp_que: mp_que {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_QUE";
            bindings = <&kp ES_QMARK>, <&kp ES_IQMARK>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mp_slash: mp_slash {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_SLASH";
            bindings = <&kp ES_SLASH>, <&kp ES_BSLH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mp_gt_dot: mp_gt_dot {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_GT_DOT";
            bindings = <&kp ES_GT>, <&kp ES_DOT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mp_lt_comma: mp_lt_comma {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_LT_COMMA";
            bindings = <&kp ES_LT>, <&kp ES_COMMA>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        tgl_on: tgl_on {
            compatible = "zmk,behavior-toggle-layer";
            label = "TGL_ON";
            #binding-cells = <1>;
            toggle-mode = "on";
        };

        tgl_off: tgl_off {
            compatible = "zmk,behavior-toggle-layer";
            label = "TGL_OFF";
            #binding-cells = <1>;
            toggle-mode = "off";
        };

        ALT_RALT: ALT_RALT {
            compatible = "zmk,behavior-tap-dance";
            label = "ALT_RALT";
            #binding-cells = <0>;
            bindings = <&kp LALT>, <&kp RALT>;

            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qrt {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB     &kp Q  &kp W  &kp E      &kp R  &kp T        &kp Y      &kp U  &kp I         &kp O       &kp P           &kp BACKSPACE
&kp LSHIFT  &kp A  &kp S  &kp D      &kp F  &kp G        &kp H      &kp J  &kp K         &kp L       &kp ES_N_TILDE  &td_shf_cap
&kp LCTRL   &kp Z  &kp X  &kp C      &kp V  &kp B        &kp N      &kp M  &kp COMMA     &kp PERIOD  &kp ES_ACUTE    &kp LWIN
                          &ALT_RALT  &mo 2  &kp SPACE    &kp ENTER  &mo 1  &lt 3 ESCAPE
            >;
        };

        syn {
            bindings = <
&la_grave  &kp ES_N1     &kp ES_N2     &kp ES_N3      &kp ES_N4       &kp ES_N5       &kp ES_N6  &kp ES_N7    &kp ES_N8     &kp ES_N9   &kp ES_N0     &trans
&trans     &kp ES_PLUS   &kp ES_EQUAL  &kp ES_AMPS    &kp ES_PIPE     &kp ES_POUND    &mp_exc    &kp ES_LBRC  &mp_lpar      &mp_rpar    &kp ES_MINUS  &mp_quo
&trans     &kp ES_ASTRK  &kp ES_AT     &kp ES_DOLLAR  &kp ES_PERCENT  &kp ES_CARET    &mp_que    &kp ES_RBRC  &mp_lt_comma  &mp_gt_dot  &mp_slash     &kp ES_TILDE
                                       &trans         &trans          &trans          &trans     &tgl_off 1   &trans
            >;
        };

        nav {
            bindings = <
&kp ESCAPE  &kp LG(ES_Q)  &kp LC(W)     &kp LG(ES_E)  &kp LG(ES_R)  &kp LG(ES_T)    &none           &kp PG_UP  &none     &none      &none  &kp LC(BACKSPACE)
&trans      &kp LC(A)     &kp LC(S)     &kp DEL       &kp LC(F)     &kp LC(G)       &kp LEFT_ARROW  &kp DOWN   &kp UP    &kp RIGHT  &none  &none
&trans      &kp LC(Z)     &kp LC(ES_X)  &kp LC(C)     &kp LC(ES_V)  &kp LC(ES_B)    &none           &kp PG_DN  &kp HOME  &kp END    &none  &trans
                                        &trans        &tgl_off 2    &kp ENTER       &trans          &trans     &trans
            >;
        };

        sys {
            bindings = <
&none   &none  &none            &none   &kp INSERT  &kp C_MUTE      &kp F1  &kp F2     &kp F3   &kp F4   &bt BT_SEL 0  &kp PAUSE_BREAK
&trans  &none  &kp PRINTSCREEN  &none   &none       &kp C_VOL_UP    &kp F5  &kp F6     &kp F7   &kp F8   &bt BT_NXT    &trans
&trans  &none  &none            &none   &none       &kp C_VOL_DN    &kp F9  &kp F10    &kp F11  &kp F12  &none         &trans
                                &trans  &tgl_on 2   &trans          &trans  &tgl_on 1  &trans
            >;
        };

        win {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &win_roll  &win_tile_tl  &win_tile_t  &win_tile_tr  &none      &win_close
&trans  &trans  &trans  &trans  &trans  &trans    &dsk_prev  &win_tile_l   &win_max     &win_tile_r   &dsk_next  &none
&trans  &trans  &trans  &trans  &trans  &trans    &win_min   &win_tile_bl  &win_tile_b  &win_tile_br  &none      &none
                        &trans  &trans  &trans    &trans     &trans        &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        cndwin {
            if-layers = <1 2>;
            then-layer = <4>;
        };
    };
};
