/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "keys_es_latin_american.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&sk {
    /delete-property/ ignore-modifiers;

    release-after-ms = <1500>;
};

&caps_word {
    continue-list = <UNDERSCORE BACKSPACE DELETE SLASH>;
    mods = <(MOD_LSFT)>;
};

&lt {
    flavor = "hold-preferred";
    tapping-term-ms = <160>;
};

/ {
    combos {
        compatible = "zmk,combos";

        bootldr_l {
            bindings = <&bootloader>;
            key-positions = <24 29>;
            layers = <4>;
        };

        bootldr_r {
            bindings = <&bootloader>;
            key-positions = <30 35>;
            layers = <4>;
        };

        reset_l {
            bindings = <&sys_reset>;
            key-positions = <0 5>;
            layers = <4>;
        };

        reset_r {
            bindings = <&sys_reset>;
            key-positions = <6 11>;
            layers = <4>;
        };

        clear_bt_profile {
            bindings = <&bt BT_CLR>;
            key-positions = <29 26>;
            layers = <4>;
        };
    };

    macros {
        shift: shift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LEFT_SHIFT>;

            label = "SHIFT";
        };

        as: as {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;

            label = "AS";
        };

        dmkp: delayed_modkp {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&macro_param_2to1 &kp MACRO_PLACEHOLDER>,
                <&macro_wait_time 80>,
                <&macro_release>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>;

            label = "DELAYED_MODKP";
        };

        la_grave: tildegrave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(BACKSLASH) &kp SPACE>;
            label = "TILDEGRAVE";
        };

        la_bullet: la_bullet {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(COMMA)>;
            label = "LA_BULLET";
        };

        la_cent: la_cent {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(ES_C)>;
            label = "LA_CENT";
        };
    };

    behaviors {
        as_ht: autoshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            bindings = <&shift>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
            flavor = "tap-preferred";
        };

        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <165>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 37 0>;
            flavor = "tap-preferred";
            quick-tap-ms = <250>;
            require-prior-idle-ms = <125>;
        };

        mp_quo: mp_quo {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_QUO";
            bindings = <&kp ES_DOUBLE_QUOTES>, <&kp ES_SINGLE_QUOTE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mp_exc: mp_exc {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_EXC";
            bindings = <&kp EXCL>, <&kp ES_INVERTED_EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mp_quest: mp_quest {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_QUEST";
            bindings = <&kp ES_QUESTION>, <&kp ES_INVERTED_QUESTION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mp_otd_grv: mp_otd_grv {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_OTD_GRV";
            bindings = <&kp ES_TILDE>, <&la_grave>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mp_slh_bsl: mp_slh_bsl {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_SLH_BSL";
            bindings = <&kp ES_SLASH>, <&kp ES_BACKSLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mp_2_lt: mp_2_lt {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_2_LT";
            bindings = <&kp NUMBER_2>, <&kp ES_LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mp_3_gt: mp_3_gt {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_3_GT";
            bindings = <&kp NUMBER_3>, <&kp ES_GT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ht_mp_quo: ht_mp_quo {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_MP_QUO";
            bindings = <&kp>, <&mp_quo>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <32 33>;
            flavor = "balanced";
        };

        ht: ht {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <1 2 3 4 5 13 14 15 16 17 25 26 27 28 29 6 7 8 9 10 18 19 20 21 22 30 31 32 33 34 11 0>;
            flavor = "balanced";
        };

        mp_es_quo: mp_es_quo {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_ES_QUO";
            bindings = <&kp RA(ES_B)>, <&kp RA(ES_N)>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        mp_eq_brk: mp_eq_brk {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_EQ_BRK";
            bindings = <&kp ES_EQUAL>, <&kp ES_LEFT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mp_7_brk: mp_7_brk {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_7_BRK";
            bindings = <&kp ES_N7>, <&kp ES_RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mp_plus_brc: mp_plus_brc {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_PLUS_BRC";
            bindings = <&kp ES_PLUS>, <&kp ES_LEFT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mp_4_brc: mp_4_brc {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_4_BRC";
            bindings = <&kp ES_N4>, <&kp ES_RIGHT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qrt {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB       &kp Q  &kp W  &kp E             &kp R  &kp T        &kp Y      &kp U  &kp I              &kp O       &kp P           &kp BACKSPACE
&kp LSHIFT    &kp A  &kp S  &kp D             &kp F  &kp G        &kp H      &kp J  &kp K              &kp L       &kp ES_N_TILDE  &ht RSHIFT ES_ACUTE
&kp LEFT_GUI  &kp Z  &kp X  &kp C             &kp V  &kp B        &kp N      &kp M  &kp COMMA          &kp PERIOD  &kp LEFT_ALT    &lt 4 ESCAPE
                            &kp LEFT_CONTROL  &mo 1  &kp SPACE    &kp ENTER  &mo 3  &kp RIGHT_CONTROL
            >;
        };

        num {
            bindings = <
&kp ESCAPE    &none  &none  &kp ESCAPE        &none  &none        &kp ES_AMPS  &kp ES_N7     &kp N8             &kp N9     &kp ES_ASTRK       &kp BACKSPACE
&kp LSHIFT    &none  &none  &kp DELETE        &none  &none        &kp ES_PLUS  &kp ES_N4     &kp ES_N5          &kp ES_N6  &kp ES_MINUS       &kp ES_DOUBLE_QUOTES
&kp LEFT_GUI  &none  &none  &none             &none  &none        &kp N0       &kp NUMBER_1  &kp ES_N2          &kp ES_N3  &kp ES_UNDERSCORE  &kp ES_SINGLE_QUOTE
                            &kp LEFT_CONTROL  &none  &kp ENTER    &kp ENTER    &mo 2         &kp RIGHT_CONTROL
            >;
        };

        grp {
            bindings = <
&none  &none  &none  &none             &none  &none        &none                &kp ES_LPAR  &kp ES_RPAR        &none                 &none  &none
&none  &none  &none  &none             &none  &none        &kp ES_LEFT_BRACKET  &kp ES_LBRC  &kp ES_RBRC        &kp ES_RIGHT_BRACKET  &none  &none
&none  &none  &none  &none             &none  &none        &none                &kp ES_LT    &kp ES_GT          &none                 &none  &none
                     &kp LEFT_CONTROL  &none  &kp ENTER    &kp BACKSPACE        &none        &kp RIGHT_CONTROL
            >;
        };

        nav {
            bindings = <
&kp TAB     &kp ES_QUESTION  &kp ES_INVERTED_QUESTION  &kp ES_EQUAL      &kp ES_PERCENT  &la_grave        &kp ES_AMPS     &kp PG_UP       &kp PAGE_DOWN      &kp ES_PIPE      &kp TAB       &kp DELETE
&kp LSHIFT  &kp ES_AT        &kp ES_SLASH              &kp ES_DOLLAR     &kp ES_DEG      &kp ES_POUND     &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW       &kp RIGHT_ARROW  &kp ES_TILDE  &kp RSHIFT
&kp LGUI    &kp LEFT_ALT     &kp ES_BACKSLASH          &la_cent          &kp ES_CARET    &la_bullet       &kp ES_EXCL     &kp ES_IEXCL    &kp HOME           &kp END          &kp RALT      &kp ESCAPE
                                                       &kp LEFT_CONTROL  &none           &kp BACKSPACE    &kp SPACE       &none           &kp RIGHT_CONTROL
            >;
        };

        sys {
            bindings = <
&bt BT_NXT      &bt BT_SEL 0  &bt BT_SEL 1     &bt BT_SEL 2      &kp C_VOLUME_UP  &kp INSERT    &none  &kp F7  &kp F8             &kp F9  &kp F10  &kp PAUSE_BREAK
&kp LEFT_SHIFT  &none         &kp PRINTSCREEN  &none             &kp C_VOL_DN     &none         &none  &kp F4  &kp F5             &kp F6  &kp F11  &none
&kp LEFT_GUI    &kp LEFT_ALT  &none            &kp CAPSLOCK      &kp C_MUTE       &none         &none  &kp F1  &kp F2             &kp F3  &kp F12  &trans
                                               &kp LEFT_CONTROL  &none            &none         &none  &none   &kp RIGHT_CONTROL
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
