/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&sk { /delete-property/ ignore-modifiers; };

/ {
    combos {
        compatible = "zmk,combos";

        syst_layer {
            bindings = <&tog 4>;
            key-positions = <35 23 11>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };

        base_layer {
            bindings = <&to 0>;
            key-positions = <11 35>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
        };

        tog_fnum_layer {
            bindings = <&tog 2>;
            key-positions = <23 35>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };

        space {
            bindings = <&kp SPACE>;
            key-positions = <16 17>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            layers = <3>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <28 29>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            layers = <3>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <5 4>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            layers = <3>;
        };

        pageup {
            bindings = <&kp PAGE_UP>;
            key-positions = <8 9>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            layers = <1 3>;
        };

        pagedown {
            bindings = <&kp PAGE_DOWN>;
            key-positions = <20 21>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            layers = <1 3>;
        };
    };

    macros {
        shift: shift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LEFT_SHIFT>;

            label = "SHIFT";
        };

        as: as {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;

            label = "AS";
        };

        dmkp: delayed_modkp {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&macro_param_2to1 &kp MACRO_PLACEHOLDER>,
                <&macro_wait_time 80>,
                <&macro_release>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>;

            label = "DELAYED_MODKP";
        };

        la_caret: mcaret {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(SINGLE_QUOTE) &kp SPACE>;
            label = "MCARET";
        };

        la_grave: tildegrave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(BACKSLASH) &kp SPACE>;
            label = "TILDEGRAVE";
        };

        la_tilde: mtilde {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(RIGHT_BRACKET) &kp SPACE>;
            label = "MTILDE";
        };

        la_parn_o: mparenopen {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(N8)>;
            label = "MPARENOPEN";
        };

        la_parn_c: mparencl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(N9)>;
            label = "MPARENCL";
        };

        la_brce_o: mbraceo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp APOS>;
            label = "MBRACEO";
        };

        la_brce_c: mbracec {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp BACKSLASH>;
            label = "MBRACEC";
        };

        la_brkt_o: bracketo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(APOS)>;
            label = "BRACKETO";
        };

        la_brkt_c: bracketc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(BACKSLASH)>;
            label = "BRACKETC";
        };

        la_less: mlessthan {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp NON_US_BACKSLASH>;
            label = "MLESSTHAN";
        };

        la_great: mgreat {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(NON_US_BACKSLASH)>;
            label = "MGREAT";
        };

        la_at: arroba {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(Q)>;
            label = "ARROBA";
        };

        la_amp: amp {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(NUMBER_6)>;
            label = "AMP";
        };

        la_astsk: astersk {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(RIGHT_BRACKET)>;
            label = "ASTERSK";
        };

        la_equal: la_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(NUMBER_0)>;
            label = "LA_EQUAL";
        };

        la_plus: la_plus {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_BRACKET>;
            label = "LA_PLUS";
        };

        la_minus: la_minus {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SLASH>;
            label = "LA_MINUS";
        };

        la_pipe: la_pipe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE>;
            label = "LA_PIPE";
        };
    };

    behaviors {
        as_ht: autoshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            bindings = <&shift>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
            flavor = "tap-preferred";
        };

        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <165>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            flavor = "tap-preferred";
            quick-tap-ms = <250>;
            require-prior-idle-ms = <125>;
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <165>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            flavor = "tap-preferred";
            quick-tap-ms = <250>;
            require-prior-idle-ms = <125>;
        };

        ssw: symbol_switch {
            compatible = "zmk,behavior-hold-tap";
            label = "SYMBOL_SWITCH";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <165>;
            flavor = "balanced";
            quick-tap-ms = <250>;
        };

        lsm: layer_switch_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_SWITCH_MODS";
            bindings = <&mo>, <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <160>;
            flavor = "hold-preferred";
        };

        quotes: quotes {
            compatible = "zmk,behavior-mod-morph";
            label = "QUOTES";
            bindings = <&dmkp LEFT_SHIFT NUMBER_2>, <&kp MINUS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        slashes: slashes {
            compatible = "zmk,behavior-mod-morph";
            label = "SLASHES";
            bindings = <&kp LS(N7)>, <&kp RA(MINUS)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        exclm: exclm {
            compatible = "zmk,behavior-mod-morph";
            label = "EXCLM";
            bindings = <&kp EXCL>, <&kp LS(EQUAL)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        questm: questm {
            compatible = "zmk,behavior-mod-morph";
            label = "QUESTM";
            bindings = <&kp LS(MINUS)>, <&kp EQUAL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        braces: braces {
            compatible = "zmk,behavior-mod-morph";
            label = "BRACES";
            bindings = <&kp SINGLE_QUOTE>, <&kp BACKSLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        parnts: parnts {
            compatible = "zmk,behavior-mod-morph";
            label = "PARNTS";
            bindings = <&kp LS(N8)>, <&kp LS(N9)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        brckts: brckts {
            compatible = "zmk,behavior-mod-morph";
            label = "BRCKTS";
            bindings = <&kp LS(SINGLE_QUOTE)>, <&kp LS(BACKSLASH)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        gravetilde: gravetilde {
            compatible = "zmk,behavior-mod-morph";
            label = "GRAVETILDE";
            bindings = <&la_grave>, <&la_tilde>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        m2comma: m2comma {
            compatible = "zmk,behavior-mod-morph";
            label = "M2COMMA";
            bindings = <&kp NUMBER_2>, <&kp COMMA>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        m3dot: m3dot {
            compatible = "zmk,behavior-mod-morph";
            label = "M3DOT";
            bindings = <&kp NUMBER_3>, <&kp DOT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        less_bracketo: less_bracketo {
            compatible = "zmk,behavior-mod-morph";
            label = "LESS_BRACKETO";
            bindings = <&la_less>, <&la_brkt_o>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        great_bracketc: great_bracketc {
            compatible = "zmk,behavior-mod-morph";
            label = "GREAT_BRACKETC";
            bindings = <&la_great>, <&la_brkt_c>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        paren_bracket_o: paren_bracket_o {
            compatible = "zmk,behavior-mod-morph";
            label = "PAREN_BRACKET_O";
            bindings = <&la_parn_o>, <&la_brkt_o>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        paren_bracket_c: paren_bracket_c {
            compatible = "zmk,behavior-mod-morph";
            label = "PAREN_BRACKET_C";
            bindings = <&la_parn_c>, <&la_brkt_c>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB           &kp Q  &kp W          &kp E                &kp R            &kp T        &kp Y      &kp U            &kp I                 &kp O          &kp P     &kp ESCAPE
&sk LEFT_CONTROL  &kp A  &hml LSHIFT S  &hml LEFT_CONTROL D  &hml LEFT_ALT F  &kp G        &kp H      &hmr LEFT_ALT J  &hmr RIGHT_CONTROL K  &hmr RSHIFT L  &kp SEMI  &ssw MINUS LEFT_BRACKET
&sk LSHFT         &kp Z  &kp X          &kp C                &kp V            &kp B        &kp N      &kp M            &kp COMMA             &kp DOT        &slashes  &kp RALT
                                        &kp LCMD             &mo 3            &kp ENTER    &kp SPACE  &mo 1            &kp BACKSPACE
            >;
        };

        fctl {
            bindings = <
&trans  &kp PRINTSCREEN  &caps_word  &kp INS           &la_brkt_o  &la_brkt_c    &kp F1     &kp F2          &kp F3        &kp F4     &kp F5   &kp PAUSE_BREAK
&trans  &none            &kp LSHIFT  &kp LEFT_CONTROL  &la_parn_o  &la_parn_c    &kp LEFT   &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &kp F11  &kp F12
&trans  &none            &kp LC(X)   &kp LC(C)         &la_brce_o  &la_brkt_c    &kp F6     &kp F7          &kp F8        &kp F9     &kp F10  &kp LEFT_ALT
                                     &trans            &mo 3       &kp SPACE     &kp ENTER  &trans          &kp DELETE
            >;
        };

        kpad {
            bindings = <
&trans  &none  &none           &kp F2            &trans  &trans    &none   &kp N7        &kp N8    &kp N9        &kp N0  &kp ESCAPE
&trans  &none  &kp LEFT_SHIFT  &kp LEFT_CONTROL  &trans  &trans    &none   &kp NUMBER_4  &kp N5    &kp NUMBER_6  &none   &none
&trans  &none  &none           &none             &trans  &trans    &none   &kp N1        &m2comma  &m3dot        &none   &trans
                               &trans            &mo 3   &trans    &trans  &trans        &trans
            >;
        };

        symb {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&gravetilde  &la_at        &kp HASH              &kp DOLLAR     &kp PERCENT   &la_caret    &la_amp           &la_astsk         &la_equal   &la_plus    &exclm     &la_pipe
&trans       &kp NUMBER_1  &hml LSHIFT NUMBER_2  &kp NUMBER_3   &kp NUMBER_4  &kp N5       &paren_bracket_o  &paren_bracket_c  &la_brce_o  &la_brce_c  &la_minus  &quotes
&trans       &kp NUMBER_6  &kp N7                &kp N8         &kp N9        &kp N0       &kp HOME          &kp END           &la_less    &la_great   &questm    &kp LEFT_ALT
                                                 &kp BACKSPACE  &trans        &kp SPACE    &trans            &trans            &kp DEL
            >;
        };

        syst {
            bindings = <
&to 0                      &none         &none         &none         &sys_reset    &none          &none        &sys_reset  &none  &none  &none  &to 0
&dmkp LEFT_SHIFT NUMBER_2  &none         &none         &trans        &none         &none          &none        &none       &none  &none  &none  &none
&bt BT_CLR                 &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bootloader    &bootloader  &none       &none  &none  &none  &none
                                                       &none         &none         &none          &none        &none       &none
            >;
        };
    };
};
