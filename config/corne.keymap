/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
// #define ZMK_POINTING_DEFAULT_MOVE_VAL 1000
// #define ZMK_POINTING_DEFAULT_SCRL_VAL 20

#include "keys_es_latin_american.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&caps_word {
    continue-list = <UNDERSCORE BACKSPACE DELETE SLASH>;
    mods = <(MOD_LSFT)>;
};

&lt {
    flavor = "hold-preferred";
    tapping-term-ms = <160>;
    quick-tap-ms = <150>;
};

&mmv { time-to-max-speed-ms = <500>; };

/ {
    combos {
        compatible = "zmk,combos";

        bootldr_l {
            bindings = <&bootloader>;
            key-positions = <24 29>;
            layers = <2>;
        };

        bootldr_r {
            bindings = <&bootloader>;
            key-positions = <30 35>;
            layers = <2>;
        };

        reset_l {
            bindings = <&sys_reset>;
            key-positions = <0 5>;
            layers = <2>;
        };

        reset_r {
            bindings = <&sys_reset>;
            key-positions = <6 11>;
            layers = <2>;
        };
    };

    macros {
        shift: shift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LEFT_SHIFT>;

            label = "SHIFT";
        };

        as: as {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;

            label = "AS";
        };

        dmkp: delayed_modkp {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&macro_param_2to1 &kp MACRO_PLACEHOLDER>,
                <&macro_wait_time 80>,
                <&macro_release>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>;

            label = "DELAYED_MODKP";
        };

        la_grave: tildegrave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(BACKSLASH) &kp SPACE>;
            label = "TILDEGRAVE";
        };

        win_close: win_close {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(F4)>;
            label = "WIN_CLOSE";
        };

        win_max: win_max {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(UP)>;
            label = "WIN_MAX";
        };

        win_hide: win_min {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(DOWN)>;
            label = "WIN_MIN";
        };

        win_tile_l: win_tile_l {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LEFT)>;
            label = "WIN_TILE_L";
        };

        win_tile_r: win_tile_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(RIGHT)>;
            label = "WIN_TILE_RIGHT";
        };

        win_tile_t: win_tile_t {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(UP))>;
            label = "WIN_TILE_T";
        };

        win_tile_b: win_tile_b {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(DOWN))>;
            label = "WIN_TILE_B";
        };

        win_tile_tl: win_tile_tl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(LC(LEFT)))>;
            label = "WIN_TILE_TL";
        };

        win_tile_bl: win_tile_bl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(LEFT))>;
            label = "WIN_TILE_BL";
        };

        win_tile_tr: win_tile_tr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(LC(RIGHT)))>;
            label = "WIN_TILE_TR";
        };

        win_tile_br: win_tile_br {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(RIGHT))>;
            label = "WIN_TILE_BR";
        };

        wks_prv: dsk_prev {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(LA(LS(LEFT))))>;
            label = "DSK_PREV";
        };

        wks_nxt: dsk_next {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(LA(LS(RIGHT))))>;
            label = "DSK_NEXT";
        };

        win_roll: win_roll {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(LS(UP)))>;
            label = "WIN_ROLL";
        };

        dsk_show: dsk_show {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(D)>;
            label = "DSK_SHOW";
        };

        win_scr_l: win_mv_l {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LS(LEFT))>;
            label = "WIN_MV_L";
        };

        win_scr_r: win_mv_r {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LS(RIGHT))>;
            label = "WIN_MV_R";
        };

        win_wks_l: win_wks_l {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(LEFT))>;
            label = "WIN_WKS_L";
        };

        win_wks_r: win_wks_r {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(RIGHT))>;
            label = "WIN_WKS_R";
        };
    };

    behaviors {
        as_ht: autoshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            bindings = <&shift>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
            flavor = "tap-preferred";
        };

        ht_h: ht_h {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_H";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <160>;
            hold-trigger-key-positions = <1 2 3 4 5 13 14 15 16 17 25 26 27 28 29 6 7 8 9 10 18 19 20 21 22 30 31 32 33 34 11 0 23 35 24 12 38 39>;
            flavor = "balanced";
            hold-while-undecided;
        };

        td_shf_cap: td_shf_cap {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SHF_CAP";
            #binding-cells = <0>;
            bindings = <&kp RSHIFT>, <&kp CLCK>;

            tapping-term-ms = <300>;
        };

        mp_lpar: mp_lpar {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_LPAR";
            bindings = <&kp ES_LPAR>, <&kp ES_LBKT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mp_rpar: mp_rpar {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_RPAR";
            bindings = <&kp ES_RPAR>, <&kp ES_RBKT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        EXCMRKS: EXCMRKS {
            compatible = "zmk,behavior-mod-morph";
            label = "EXCMRKS";
            bindings = <&kp ES_EXCL>, <&kp ES_IEXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        QUEMRKS: QUEMRKS {
            compatible = "zmk,behavior-mod-morph";
            label = "QUEMRKS";
            bindings = <&kp ES_QMARK>, <&kp ES_IQMARK>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        DIV_SLH: DIV_SLH {
            compatible = "zmk,behavior-mod-morph";
            label = "DIV_SLH";
            bindings = <&kp ES_SLASH>, <&kp ES_BSLH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mp_brc_gt: mp_brc_gt {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_BRC_GT";
            bindings = <&kp ES_RBRC>, <&kp ES_GT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mp_brc_lt: mp_brc_lt {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_BRC_LT";
            bindings = <&kp ES_LBRC>, <&kp ES_LT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        tgl_on: tgl_on {
            compatible = "zmk,behavior-toggle-layer";
            label = "TGL_ON";
            #binding-cells = <1>;
            toggle-mode = "on";
        };

        tgl_off: tgl_off {
            compatible = "zmk,behavior-toggle-layer";
            label = "TGL_OFF";
            #binding-cells = <1>;
            toggle-mode = "off";
        };

        AST_PER: AST_PER {
            compatible = "zmk,behavior-mod-morph";
            label = "AST_PER";
            bindings = <&kp ES_ASTRK>, <&kp ES_PERCENT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        HHT: HHT {
            compatible = "zmk,behavior-hold-tap";
            label = "HHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <160>;
            flavor = "hold-preferred";
            hold-while-undecided;
        };

        WIN_CTX: WIN_CTX {
            compatible = "zmk,behavior-mod-morph";
            label = "WIN_CTX";
            bindings = <&kp LWIN>, <&kp LS(F10)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        TLD_CRT: TLD_CRT {
            compatible = "zmk,behavior-mod-morph";
            label = "TLD_CRT";
            bindings = <&kp ES_TILDE>, <&kp ES_CARET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        QUOTES: QUOTES {
            compatible = "zmk,behavior-mod-morph";
            label = "QUOTES";
            bindings = <&kp ES_SINGLE_QUOTE>, <&kp ES_DOUBLE_QUOTES>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        SHFT_QUO: SHFT_QUO {
            compatible = "zmk,behavior-hold-tap";
            label = "SHFT_QUO";
            bindings = <&kp>, <&QUOTES>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "hold-preferred";
            hold-while-undecided;
            quick-tap-ms = <200>;
            retro-tap;
        };

        TILDE_WIN: TILDE_WIN {
            compatible = "zmk,behavior-tap-dance";
            label = "TILDE_WIN";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp ES_ACUTE>, <&kp LWIN>;
        };

        BHTL: BHTL {
            compatible = "zmk,behavior-hold-tap";
            label = "BHTL";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <160>;
            hold-trigger-key-positions = <1 2 3 4 5 13 14 15 16 17 25 26 27 28 29 6 7 8 9 10 18 19 20 21 22 30 31 32 33 34 11 0 23 41 36 12 38 39 35 24 37>;
            flavor = "balanced";
            hold-while-undecided;
            require-prior-idle-ms = <125>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qrt {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB                   &kp Q  &kp W  &kp E     &kp R  &kp T        &kp Y      &kp U             &kp I         &kp O       &kp P           &kp BACKSPACE
&kp LSHIFT                &kp A  &kp S  &kp D     &kp F  &kp G        &kp H      &kp J             &kp K         &kp L       &kp ES_N_TILDE  &kp RSHIFT
&HHT LEFT_CONTROL ESCAPE  &kp Z  &kp X  &kp C     &kp V  &kp B        &kp N      &kp M             &kp COMMA     &kp PERIOD  &QUOTES         &HHT RIGHT_CONTROL ESCAPE
                                        &kp LALT  &mo 2  &kp SPACE    &kp ENTER  &BHTL 3 ES_ACUTE  &kp LEFT_WIN
            >;
        };

        cmk {
            bindings = <
&trans  &kp Q  &kp W  &kp F   &kp P   &kp G     &kp J   &kp L   &kp U         &kp Y       &kp ES_N_TILDE  &trans
&trans  &kp A  &kp R  &kp S   &kp T   &kp D     &kp H   &kp N   &kp E         &kp I       &kp O           &trans
&trans  &kp Z  &kp X  &kp C   &kp V   &kp B     &kp K   &kp M   &kp ES_COMMA  &kp ES_DOT  &trans          &trans
                      &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        fun {
            bindings = <
&trans  &kp F1      &kp F2           &kp F3           &kp F4        &kp F5          &kp F6          &kp F7     &kp F8    &kp F9     &kp F10  &trans
&trans  &kp ENTER   &kp PRINTSCREEN  &kp DEL          &kp C_VOL_UP  &kp CAPSLOCK    &kp LEFT_ARROW  &kp DOWN   &kp UP    &kp RIGHT  &kp F11  &trans
&trans  &kp INSERT  &kp C_MUTE       &kp PAUSE_BREAK  &kp C_VOL_DN  &mo 5           &kp PG_UP       &kp PG_DN  &kp HOME  &kp END    &kp F12  &trans
                                     &trans           &trans        &trans          &trans          &trans     &kp LWIN
            >;
        };

        sym {
            bindings = <
&la_grave  &kp ES_N1     &kp ES_N2      &kp ES_N3     &kp ES_N4    &kp ES_N5       &kp ES_N6    &kp ES_N7    &kp ES_N8  &kp ES_N9  &kp ES_N0     &trans
&trans     &EXCMRKS      &kp ES_AT      &kp ES_EQUAL  &kp ES_AMPS  &QUEMRKS        &kp ES_PLUS  &kp ES_LBRC  &mp_lpar   &mp_rpar   &kp ES_MINUS  &trans
&trans     &kp ES_TILDE  &kp ES_DOLLAR  &kp ES_POUND  &kp ES_PIPE  &kp ES_CARET    &AST_PER     &kp ES_RBRC  &kp ES_LT  &kp ES_GT  &DIV_SLH      &trans
                                        &kp RALT      &trans       &trans          &trans       &trans       &kp LWIN
            >;
        };

        wkp {
            bindings = <
&win_roll  &win_close  &win_tile_tl  &win_tile_t  &win_tile_tr  &win_max      &none      &kp N7  &kp N8    &kp N9  &kp N0  &trans
&trans     &win_scr_l  &win_tile_l   &dsk_show    &win_tile_r   &win_scr_r    &win_hide  &kp N4  &kp N5    &kp N6  &none   &trans
&trans     &win_wks_l  &win_tile_bl  &win_tile_b  &win_tile_br  &win_wks_r    &wks_nxt   &kp N1  &kp N2    &kp N3  &none   &trans
                                     &trans       &none         &none         &none      &none   &kp LWIN
            >;
        };

        bth {
            bindings = <
&none        &none         &none       &none       &none  &none    &none  &none  &none  &out OUT_TOG  &none  &none
&none        &bt BT_SEL 0  &bt BT_NXT  &bt BT_CLR  &none  &none    &none  &none  &none  &none         &none  &none
&bootloader  &tog 1        &none       &none       &none  &none    &none  &none  &none  &none         &none  &bootloader
                                       &none       &none  &none    &none  &none  &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        cndwin {
            if-layers = <2 3>;
            then-layer = <4>;
        };
    };
};
