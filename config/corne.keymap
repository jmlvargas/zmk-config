/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&sk {
    /delete-property/ ignore-modifiers;

    release-after-ms = <1500>;
};

&caps_word {
    continue-list = <UNDERSCORE BACKSPACE DELETE SLASH>;
    mods = <(MOD_LSFT)>;
};

/ {
    combos {
        compatible = "zmk,combos";

        bootldr_l {
            bindings = <&bootloader>;
            key-positions = <24 29>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            layers = <3 1>;
        };

        bootldr_r {
            bindings = <&bootloader>;
            key-positions = <30 35>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            layers = <3 1>;
        };

        reset_l {
            bindings = <&sys_reset>;
            key-positions = <0 5>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            layers = <3 1>;
        };

        reset_r {
            bindings = <&sys_reset>;
            key-positions = <6 11>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            layers = <3 1>;
        };

        clear_bt_profile {
            bindings = <&bt BT_CLR>;
            key-positions = <29 26>;
            layers = <3 1>;
        };
    };

    macros {
        shift: shift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LEFT_SHIFT>;

            label = "SHIFT";
        };

        as: as {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;

            label = "AS";
        };

        dmkp: delayed_modkp {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&macro_param_2to1 &kp MACRO_PLACEHOLDER>,
                <&macro_wait_time 80>,
                <&macro_release>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>;

            label = "DELAYED_MODKP";
        };

        la_caret: mcaret {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(SINGLE_QUOTE) &kp SPACE>;
            label = "MCARET";
        };

        la_grave: tildegrave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(BACKSLASH) &kp SPACE>;
            label = "TILDEGRAVE";
        };

        la_otilde: la_oblique_tilde {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(RIGHT_BRACKET)>;
            label = "LA_OBLIQUE_TILDE";
        };

        la_par_o: mparenopen {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(N8)>;
            label = "MPARENOPEN";
        };

        la_par_c: mparencl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(N9)>;
            label = "MPARENCL";
        };

        la_brace_o: mbraceo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp APOS>;
            label = "MBRACEO";
        };

        la_brace_c: mbracec {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp BACKSLASH>;
            label = "MBRACEC";
        };

        la_brack_o: bracketo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(APOS)>;
            label = "BRACKETO";
        };

        la_brack_c: bracketc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(BACKSLASH)>;
            label = "BRACKETC";
        };

        la_less: mlessthan {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp NON_US_BACKSLASH>;
            label = "MLESSTHAN";
        };

        la_great: mgreat {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(NON_US_BACKSLASH)>;
            label = "MGREAT";
        };

        la_at: arroba {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(Q)>;
            label = "ARROBA";
        };

        la_amp: amp {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(NUMBER_6)>;
            label = "AMP";
        };

        la_aster: astersk {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(RIGHT_BRACKET)>;
            label = "ASTERSK";
        };

        la_equal: la_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(NUMBER_0)>;
            label = "LA_EQUAL";
        };

        la_plus: la_plus {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_BRACKET>;
            label = "LA_PLUS";
        };

        la_minus: la_minus {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SLASH>;
            label = "LA_MINUS";
        };

        la_pipe: la_pipe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE>;
            label = "LA_PIPE";
        };

        la_tilde: la_tilde {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET>;
            label = "LA_TILDE";
        };

        la_apost: la_apost {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS>;
            label = "LA_APOST";
        };

        la_ntild: la_ntild {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SEMICOLON>;
            label = "LA_NTILD";
        };

        la_colon: la_colon {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(DOT)>;
            label = "LA_COLON";
        };

        la_scol: la_scolon {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(COMMA)>;
            label = "LA_SCOLON";
        };

        la_quo: la_double_quote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(NUMBER_2)>;
            label = "LA_DOUBLE_QUOTE";
        };

        la_exp: la_exponente {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(SINGLE_QUOTE)>;
            label = "LA_EXPONENTE";
        };

        la_exc_o: la_exclamation_open {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(EQUAL)>;
            label = "LA_EXCLAMATION_OPEN";
        };

        la_undersc: la_undersc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(SLASH)>;
            label = "LA_UNDERSC";
        };

        la_backslash: la_backslash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(MINUS)>;
            label = "LA_BACKSLASH";
        };

        la_quest_c: la_quest_o {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(MINUS)>;
            label = "LA_QUEST_O";
        };

        la_quest_o: la_quest_c {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL>;
            label = "LA_QUEST_C";
        };

        la_slash: la_sash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(N7)>;
            label = "LA_SASH";
        };
    };

    behaviors {
        as_ht: autoshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            bindings = <&shift>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
            flavor = "tap-preferred";
        };

        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <165>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 37 0>;
            flavor = "tap-preferred";
            quick-tap-ms = <250>;
            require-prior-idle-ms = <125>;
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <165>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 11 40>;
            flavor = "tap-preferred";
            quick-tap-ms = <250>;
            require-prior-idle-ms = <125>;
        };

        ssw: symbol_switch {
            compatible = "zmk,behavior-hold-tap";
            label = "SYMBOL_SWITCH";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <165>;
            flavor = "balanced";
            quick-tap-ms = <250>;
        };

        hml_quest_c: hml_quest_c {
            compatible = "zmk,behavior-hold-tap";
            label = "HML_QUEST_C";
            bindings = <&kp>, <&la_quest_c>;

            #binding-cells = <2>;
            tapping-term-ms = <165>;
            hold-trigger-key-positions = <6 7 8 6 7 8 9 10 30 31 32 33 34 18 19 20 21 22 11 23 35>;
            flavor = "tap-preferred";
            quick-tap-ms = <250>;
            require-prior-idle-ms = <125>;
        };

        mrp_excl: mrp_excl {
            compatible = "zmk,behavior-mod-morph";
            label = "MRP_EXCL";
            bindings = <&kp EXCL>, <&la_exc_o>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mrp_quest: mrp_quest {
            compatible = "zmk,behavior-mod-morph";
            label = "MRP_QUEST";
            bindings = <&la_quest_c>, <&la_quest_o>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mrp_tilde_grave: mrp_tilde_grave {
            compatible = "zmk,behavior-mod-morph";
            label = "MRP_TILDE_GRAVE";
            bindings = <&la_otilde>, <&la_grave>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mrp_minus_und: mrp_minus_und {
            compatible = "zmk,behavior-mod-morph";
            label = "MRP_MINUS_UND";
            bindings = <&la_minus>, <&la_undersc>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        hml_sym_shift: hml_sym_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "HML_SYM_SHIFT";
            bindings = <&kp>, <&la_par_o>;

            #binding-cells = <2>;
            tapping-term-ms = <165>;
            hold-trigger-key-positions = <18 19 20 21 22 33 32 8 15 16 31 30>;
            flavor = "tap-preferred";
            quick-tap-ms = <250>;
            require-prior-idle-ms = <125>;
        };

        hml_sym_ctrl: hml_sym_ctrl {
            compatible = "zmk,behavior-hold-tap";
            label = "HML_SYM_CTRL";
            bindings = <&kp>, <&la_par_c>;

            #binding-cells = <2>;
            tapping-term-ms = <165>;
            hold-trigger-key-positions = <18 19 20 21 33 32 14 16 31 30 7 8 9 22 23>;
            flavor = "tap-preferred";
            quick-tap-ms = <250>;
            require-prior-idle-ms = <125>;
        };

        hml_sym_alt: hml_sym_alt {
            compatible = "zmk,behavior-hold-tap";
            label = "HML_SYM_ALT";
            bindings = <&kp>, <&la_brace_o>;

            #binding-cells = <2>;
            tapping-term-ms = <165>;
            hold-trigger-key-positions = <18 19 20 21 32 33 14 15 31 30>;
            flavor = "tap-preferred";
            quick-tap-ms = <250>;
            require-prior-idle-ms = <125>;
        };

        mrp_quotes: mrp_quotes {
            compatible = "zmk,behavior-mod-morph";
            label = "MRP_QUOTES";
            bindings = <&la_quo>, <&la_apost>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ht_any_hold: ht_any_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_ANY_HOLD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <1 2 3 4 5 13 14 15 16 17 25 26 27 28 29 6 7 8 9 10 18 19 20 21 22 30 31 32 33 34 11 0>;
        };

        ht_tilde: ht_tilde {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_TILDE";
            bindings = <&kp>, <&la_tilde>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <1 2 3 4 5 13 14 15 16 17 25 26 27 28 29 6 7 8 9 10 18 19 20 21 22 30 31 32 33 34 11 0>;
            flavor = "balanced";
        };

        ht_slash: ht_slash {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_SLASH";
            bindings = <&kp>, <&la_slash>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <1 2 3 4 5 13 14 15 16 17 25 26 27 28 29 6 7 8 9 10 18 19 20 21 22 30 31 32 33 34 11 0>;
        };

        ht_backslash: ht_backslash {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_BACKSLASH";
            bindings = <&kp>, <&la_backslash>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <1 2 3 4 5 13 14 15 16 17 25 26 27 28 29 6 7 8 9 10 18 19 20 21 22 30 31 32 33 34 11 0 35 23>;
        };

        ht_plus: ht_plus {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_PLUS";
            bindings = <&kp>, <&la_plus>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <1 2 3 4 5 13 14 15 16 17 25 26 27 28 29 6 7 8 9 10 18 19 20 21 22 30 31 32 33 34 11 0>;
        };

        ht_any_balanced: ht_any_balanced {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_ANY_BALANCED";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <1 2 3 4 5 13 14 15 16 17 25 26 27 28 29 6 7 8 9 10 18 19 20 21 22 30 31 32 33 34 11 0>;
            flavor = "balanced";
            require-prior-idle-ms = <200>;
            quick-tap-ms = <200>;
        };

        hmr_num_shift: hmr_num_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_NUM_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <165>;
            hold-trigger-key-positions = <13 1>;
            flavor = "tap-preferred";
            quick-tap-ms = <250>;
            require-prior-idle-ms = <125>;
        };

        ht_shift_caps: ht_shift_caps {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_SHIFT_CAPS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            hold-trigger-key-positions = <1 2 3 4 5 13 14 15 16 17 25 26 27 28 29 6 7 8 9 10 18 19 20 21 22 30 31 32 33 34 11 0 23 35 24>;
        };

        mrp_semic: mrp_semic {
            compatible = "zmk,behavior-mod-morph";
            label = "MRP_SEMIC";
            bindings = <&kp LS(COMMA)>, <&kp LS(PERIOD)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        bas {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB                             &kp Q            &kp W  &kp E         &kp R  &kp T        &kp Y      &kp U  &kp I      &kp O       &kp P                  &kp BACKSPACE
&ht_shift_caps LEFT_SHIFT CAPSLOCK  &kp A            &kp S  &kp D         &kp F  &kp G        &kp H      &kp J  &kp K      &kp L       &la_ntild              &ht_tilde RSHIFT 0
&kp LEFT_CONTROL                    &hml LEFT_ALT Z  &kp X  &kp C         &kp V  &kp B        &kp N      &kp M  &kp COMMA  &kp PERIOD  &ht_slash RIGHT_ALT 0  &ht_any_hold RIGHT_CONTROL ESCAPE
                                                            &kp LEFT_GUI  &mo 1  &kp SPACE    &kp ENTER  &mo 2  &mo 3
            >;
        };

        fst {
            bindings = <
&mrp_tilde_grave  &mrp_excl     &la_at                       &kp POUND                     &kp DOLLAR               &kp PERCENT    &la_caret   &kp N7          &kp N8         &kp N9        &la_aster             &la_equal
&kp LEFT_SHIFT    &none         &hml_sym_shift LEFT_SHIFT 0  &hml_sym_ctrl LEFT_CONTROL 0  &hml_sym_alt LEFT_ALT 0  &la_brace_c    &kp N0      &kp NUMBER_4    &kp N5         &kp NUMBER_6  &mrp_minus_und        &ht_plus RIGHT_SHIFT 0
&kp LEFT_CONTROL  &kp LEFT_ALT  &la_less                     &la_great                     &la_brack_o              &la_brack_c    &kp PERIOD  &kp NUMBER_1    &kp NUMBER_2   &kp NUMBER_3  &ht_slash LEFT_ALT 0  &ht_any_hold LEFT_CONTROL TAB
                                                             &kp DELETE                    &trans                   &kp ENTER      &kp ENTER   &kp LEFT_SHIFT  &kp BACKSPACE
            >;
        };

        snd {
            bindings = <
&mrp_tilde_grave  &mrp_excl             &la_at                   &kp POUND                     &kp DOLLAR               &kp PERCENT      &la_caret       &la_amp         &la_quest_c   &la_pipe   &la_aster                 &kp DEL
&kp LEFT_SHIFT    &none                 &hml_sym_shift LSHIFT 0  &hml_sym_ctrl LEFT_CONTROL 0  &hml_sym_alt LEFT_ALT 0  &la_brace_c      &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &mrp_semic                &mrp_quotes
&kp LEFT_CONTROL  &ht_slash LEFT_ALT 0  &la_less                 &la_great                     &la_brack_o              &la_brack_c      &kp PAGE_DOWN   &kp PAGE_UP     &kp HOME      &kp END    &ht_backslash LEFT_ALT 0  &kp RIGHT_CONTROL
                                                                 &kp LEFT_GUI                  &kp LEFT_SHIFT           &kp BACKSPACE    &kp RETURN      &trans          &kp DELETE
            >;
        };

        trd {
            bindings = <
&none             &none         &none            &none         &none         &none              &kp F1  &kp F2  &kp F3  &kp F4   &kp F5        &kp F6
&kp LEFT_SHIFT    &bt BT_CLR    &kp PRINTSCREEN  &kp C_MUTE    &kp C_VOL_DN  &kp C_VOLUME_UP    &kp F7  &kp F8  &kp F9  &kp F10  &kp F11       &kp F12
&kp LEFT_CONTROL  &kp LEFT_ALT  &kp PAUSE_BREAK  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_NXT         &none   &none   &none   &tog 1   &kp LEFT_ALT  &kp RIGHT_CONTROL
                                                 &none         &none         &none              &none   &none   &trans
            >;
        };
    };
};
