/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "keys_es_latin_american.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&sk {
    /delete-property/ ignore-modifiers;

    release-after-ms = <1500>;
};

&caps_word {
    continue-list = <UNDERSCORE BACKSPACE DELETE SLASH>;
    mods = <(MOD_LSFT)>;
};

&lt {
    flavor = "hold-preferred";
    tapping-term-ms = <160>;
};

/ {
    combos {
        compatible = "zmk,combos";

        bootldr_l {
            bindings = <&bootloader>;
            key-positions = <24 29>;
            layers = <4 1>;
        };

        bootldr_r {
            bindings = <&bootloader>;
            key-positions = <30 35>;
            layers = <4 1>;
        };

        reset_l {
            bindings = <&sys_reset>;
            key-positions = <0 5>;
            layers = <4 1>;
        };

        reset_r {
            bindings = <&sys_reset>;
            key-positions = <6 11>;
            layers = <4 1>;
        };

        clear_bt_profile {
            bindings = <&bt BT_CLR>;
            key-positions = <10 11>;
            layers = <4>;
        };
    };

    macros {
        shift: shift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LEFT_SHIFT>;

            label = "SHIFT";
        };

        as: as {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;

            label = "AS";
        };

        dmkp: delayed_modkp {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&macro_param_2to1 &kp MACRO_PLACEHOLDER>,
                <&macro_wait_time 80>,
                <&macro_release>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>;

            label = "DELAYED_MODKP";
        };

        la_grave: tildegrave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(BACKSLASH) &kp SPACE>;
            label = "TILDEGRAVE";
        };

        la_bullet: la_bullet {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(COMMA)>;
            label = "LA_BULLET";
        };

        la_cent: la_cent {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(ES_C)>;
            label = "LA_CENT";
        };
    };

    behaviors {
        as_ht: autoshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            bindings = <&shift>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
            flavor = "tap-preferred";
        };

        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <165>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 37 0>;
            flavor = "tap-preferred";
            quick-tap-ms = <250>;
            require-prior-idle-ms = <125>;
        };

        mp_quo: mp_quo {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_QUO";
            bindings = <&kp ES_SINGLE_QUOTE>, <&kp ES_DOUBLE_QUOTES>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mp_2_lt: mp_2_lt {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_2_LT";
            bindings = <&kp NUMBER_2>, <&kp ES_LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mp_3_gt: mp_3_gt {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_3_GT";
            bindings = <&kp NUMBER_3>, <&kp ES_GT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ht: ht {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <1 2 3 4 5 13 14 15 16 17 25 26 27 28 29 6 7 8 9 10 18 19 20 21 22 30 31 32 33 34 11 0>;
            flavor = "balanced";
        };

        mp_5_brk: mp_5_brk {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_5_BRK";
            bindings = <&kp N5>, <&kp ES_LBKT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mp_6_brk: mp_6_brk {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_6_BRK";
            bindings = <&kp ES_N6>, <&kp ES_RBKT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mp_4_brc: mp_4_brc {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_4_BRC";
            bindings = <&kp ES_N4>, <&kp ES_LBRC>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mp_1_brc: mp_1_brc {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_1_BRC";
            bindings = <&kp ES_N1>, <&kp ES_RBRC>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mp_exc: mp_exc {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_EXC";
            bindings = <&kp ES_EXCL>, <&kp ES_IEXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mp_que: mp_que {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_QUE";
            bindings = <&kp ES_QUESTION>, <&kp ES_INVERTED_QUESTION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mp_slash: mp_slash {
            compatible = "zmk,behavior-mod-morph";
            label = "MP_SLASH";
            bindings = <&kp ES_SLASH>, <&kp ES_BACKSLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ht_quo: ht_quo {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_QUO";
            bindings = <&kp>, <&mp_quo>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <1 2 3 4 5 13 14 15 16 17 25 26 27 28 29 6 7 8 9 10 18 19 20 21 22 30 31 32 33 34 11 0>;
            flavor = "balanced";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qrt {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB           &kp Q  &kp W  &kp E  &kp R  &kp T        &kp Y      &kp U  &kp I      &kp O       &kp P           &kp BACKSPACE
&kp LSHIFT        &kp A  &kp S  &kp D  &kp F  &kp G        &kp H      &kp J  &kp K      &kp L       &kp ES_N_TILDE  &ht RSHIFT ES_ACUTE
&kp LEFT_CONTROL  &kp Z  &kp X  &kp C  &kp V  &kp B        &kp N      &kp M  &kp COMMA  &kp PERIOD  &kp LEFT_ALT    &lt 4 ESCAPE
                                &mo 1  &mo 2  &kp SPACE    &kp ENTER  &mo 2  &mo 1
            >;
        };

        nav {
            bindings = <
&kp ESCAPE        &none         &kp LWIN  &kp LG(E)     &kp LG(R)  &kp LG(T)    &kp PG_UP       &none     &none     &none            &kp PG_UP      &none
&kp LSHIFT        &none         &none     &none         &none      &none        &kp LEFT_ARROW  &kp DOWN  &kp UP    &kp RIGHT_ARROW  &kp PAGE_DOWN  &kp RSHIFT
&kp LEFT_CONTROL  &kp LEFT_ALT  &none     &kp CAPSLOCK  &none      &none        &kp PG_DN       &none     &kp HOME  &kp END          &kp LEFT_ALT   &kp RIGHT_CONTROL
                                          &trans        &trans     &trans       &trans          &trans    &trans
            >;
        };

        sym {
            bindings = <
&la_grave         &mp_exc  &kp ES_AT  &kp ES_EQUAL  &kp ES_DOLLAR  &kp ES_PERCENT    &none          &kp ES_LBRC  &kp ES_LPAR  &kp ES_RPAR  &kp ES_ASTRK  &kp DELETE
&kp LSHIFT        &none    &none      &kp ES_AMPS   &kp ES_PIPE    &kp ES_POUND      &kp ES_PLUS    &none        &kp ES_LBKT  &kp ES_RBKT  &kp ES_MINUS  &ht_quo RSHIFT 0
&kp LEFT_CONTROL  &none    &none      &mp_que       &kp ES_CARET   &kp ES_TILDE      &none          &kp ES_RBRC  &kp ES_LT    &kp ES_GT    &mp_slash     &kp RCTRL
                                      &trans        &trans         &kp TAB           &kp BACKSPACE  &trans       &trans
            >;
        };

        num {
            bindings = <
&none             &none     &kp LGUI  &none   &none   &none     &none        &kp ES_N7  &kp ES_N8  &kp ES_N9  &kp ES_ASTRK  &none
&kp LSHIFT        &none     &none     &none   &none   &none     &kp ES_PLUS  &kp ES_N4  &kp ES_N5  &kp ES_N6  &kp ES_MINUS  &kp RSHIFT
&kp LEFT_CONTROL  &kp LALT  &none     &none   &none   &none     &kp ES_N0    &kp ES_N1  &kp ES_N2  &kp ES_N3  &mp_slash     &kp RIGHT_CONTROL
                                      &trans  &trans  &trans    &trans       &trans     &trans
            >;
        };

        sys {
            bindings = <
&kp RC(TAB)       &kp RC(Q)  &kp RC(W)     &kp RC(E)  &kp RC(R)  &kp RC(T)    &kp F1  &kp F2   &kp F3   &kp F4   &bt BT_SEL 0  &kp PAUSE_BREAK
&kp LEFT_SHIFT    &kp RC(A)  &kp RC(ES_S)  &kp RC(D)  &kp RC(F)  &kp RC(G)    &kp F5  &kp F6   &kp F7   &kp F8   &bt BT_NXT    &kp RIGHT_SHIFT
&kp LEFT_CONTROL  &kp RC(Z)  &kp RC(X)     &kp RC(C)  &kp RC(V)  &kp RC(B)    &kp F9  &kp F10  &kp F11  &kp F12  &kp LALT      &trans
                                           &trans     &trans     &trans       &trans  &trans   &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        cndnum {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
